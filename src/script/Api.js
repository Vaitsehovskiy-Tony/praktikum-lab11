'use strict';

export class Api {

  constructor(link, userForm) {

    this.userForm = userForm;
    this.link = link;

  }

  // вызов в классе CardList

  getInitialCards() {
    //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать 
    // в качестве параметра при инициализации класса
    return fetch(`http://${this.link.ip}/${this.link.groupId}/cards`, {
      headers: {
        authorization: this.link.authoriz
      }
    })
    .then(res => {
      if (res.ok) { 
        return res.json() 
      } return Promise.reject(res.status);
    })
    .catch(err => {
      console.log(`Ошибка ${err}`)
    })

  }

  // вызов в классе UserInfo

  loadUserInfo() {

    //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать 
    // в качестве параметра при инициализации класса 
    return fetch(`http://${this.link.ip}/${this.link.groupId}/users/me`, {
      headers: {
        authorization: this.link.authoriz
      }
    })
    .then(res => {
      if (res.ok) {
         return res.json() 
        } return Promise.reject(res.status);
    })
    .catch(err => {
      console.log(`Ошибка ${err}`)
    })

  }

    // вызов в классе UserInfo

  sendUserInfo() {

    //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать 
    // в качестве параметра при инициализации класса 
    return fetch(`http://${this.link.ip}/${this.link.groupId}/users/me`, {
      method: 'PATCH',
      headers: {
        authorization: this.link.authoriz,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: this.userForm.user.value,
        about: this.userForm.interests.value
      })
    })
    .then(res => {
      if (res.ok) {
         return res.json() 
        } return Promise.reject(res.status);
    })
    .catch(err => {
      console.log(`Ошибка ${err}`)
    })
    

  }

  // здесь скоро будет рабочий код

  // addNewCard(element){
  //   return fetch(`http://${this.link.ip}/${this.link.groupId}/cards`, {
  //     method: 'POST',
  //     headers: {
  //       authorization: this.link.authoriz,
  //       'Content-Type': 'application/json'
  //     },
  //     body: JSON.stringify({
  //       name: element.name,
  //       about: element.link
  //     })
  //   })
  //   .then(res => {
  //     if (res.ok) { 
  //       return res.json() 
  //     } return Promise.reject(res.status);
  //   })
  //   .then(res => {
  //     this.placeCards.addNewCard(res);
  //   })
  //   .catch(err => {
  //     console.log(`Ошибка ${err}`)
  //   })

  // }

  
}
		/**
  * Здравствуйте.
  * 
  *  /*  
     Отлично: 
        Весь функционал работает корректно
        Код чистый и хорошо читается 
        У вас нет дублирование кода 
        Вы используете делегирование 
     
  
   * Вызывать же методы класса Api лучше из других классов
   *
   *   *  Надо исправить: Для реализации вы создавали в прошлом спринте отдельные классы.   
     *  Не переносите и не дублируйте реализацию в  класс Api, С класса можно только возвращать данные  
     *  Которые получены от сервера. Это надо удалить  
     *  Надо возвращать просто данные и за одно преобразовать в нужный формат 
     * .then(res => { if (res.ok) { return res.json();   } }) 
     *   
   *  
   * Стоит отметить, что реализации в классе API быть не должно. Точнее прямого взаимодействия. Методы могут вызываться
   * из других классов и возвращать данные, а работа с этими данными должны быть непосредственно в классах создаваемых в 8 спринте
  *
   * работа принимается только при исправлении всех "Надо исправить"
   *
   * 
   * 
   * Добрый вечер!
   * 
   * Спасибо за похвалу =) 
   * Но весь остальной код далеко не такой чистый, будет неловко когда вы туда заглянете.
   * 
   * На коленке всё поправил, надеюсь, более-менее верно.
   * 
   * 
  */

  	/**
    * Здравствуйте.
    * 
     * Самый правильный способ, как пример указан в брифе
     // url лучше передавать при инициализации класса в конструктор
     fetch(`url/cards`,
          {
       headers: {
              // ключ который надо передавать в параметрах
      authorization: param.authorization
            }
          })
      .then(res => {
        if (res.ok) {
       return res.json();
          }
          // если ошибка, переходим в catch
       return Promise.reject(`Ошибка: ${res.status
          }`);
        })
    .then((result) => {
          // обрабатываем результат
          // а точнее возвращает результат работы прямо в тот класс откуда вызывали
        })
    .catch((err) => {
      console.log(err); // выведем ошибку в консоль
          });
    
   Хочу заметить что данные авторизации лучше передать при создании класса API в ввиде объекта	
    
     * Вызывать же методы класса Api лучше из других классов
     *
     * Стоит отметить, что реализации в классе API быть не должно. Точнее прямого взаимодействия. Методы могут вызываться
     * из других классов и возвращать данные, а работа с этими данными должны быть непосредственно в классах создаваемых в 8 спринте
    *
    * 	
      * Класс Api это отдельный класс который ничего не знает о других классах и методах
      * Вы можете только получать данные из этого класса и использовать эти данные.
      * Представьте, что я дам Вам другой класс(допустим DataBase) к внутренностям которого вы не будете иметь доступ и даже прочитать этот файл не сможете
      * скажу что у него есть несколько методов  getInitialCards deleteCard addCard, editUserInfo, setUserInfo и так далее
      * Который только возвращает данные, а вы можите получить только обращась к этим методам.
      * Соответственно в классе нельзя реализовать такие методы как querySelector или обратиться к другому классу, а только обратитьсяк методам.
      * Отдельная обязанность. Таким же способом Вы обращаетесь к серверу. Вы не знаете, что на сервере, даже язык программирования, но вы знаете методы
      * к которым обращаетесь и способ обращения. Это и есть обязанность отдельного класса.
      
      Зачем вы оставили в классе '18709e85-c197-4083-8e6e-7400479c7833', это такие же статические данные как IP которые должны объявлятся только 1 раз
    * 
     * работа принимается только при исправлении всех "Надо исправить"
     *
     * 
     * 
     * 
     * Добрый вечер
     * 
     * Классный пример, спасибо. Более менее теперь понял. Как раз занимался чисткой кода сегодня, всё раскидал по классам, надеюсь, верно.
     * 
     * С токеном тупанул, да 
     * 
     * 
    */

    /**
     * Здравствуйте. 
     * 
     * Зачем вы удалили преобразование данных из класса API и обработку ошибок catch. Я же вам даже пример из брифа привёл, можно сказать
     * скопировал. В примере не должно быть только реализации, всё остальное должно быть. А вы взяли и перенесли всё это в другие класса
     * 
     * Недо исправить. Вы позволяете добавить карточку в отсутствие сети, такого не должно быть. Только после подтверждением сервера 
     * Вы можите добавить карточку. 
     * 
     * 
     * Неувязочка вышла с преобразованием -_-
     * 
     * Это 4 дополнительное задание, подтверждение сервера, мне бы пока по первым 3 пунктам добро получить, и можно за остальное браться.
     * 
     * 
     */